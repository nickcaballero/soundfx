/*The MIT LicenseCopyright (c) <year> <copyright holders>Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package com.anttikupila.media.filters {	import com.anttikupila.media.SoundFX;	import com.anttikupila.media.filters.IFilter;	import flash.errors.IllegalOperationError;		/**	 * @author Antti Kupila	 */	public class DelayFilter implements IFilter {
				//---------------------------------------------------------------------		//		//  Variables		//		//---------------------------------------------------------------------				private var _feedback : Number;		private var _useMilliseconds : Boolean;		private var _length : int;		private var _mix : Number;				private var invMix : Number;				private var readPointer : int = 0;		private var writePointer : int = 0;		private var delayValue : Number;				private var buffer : Vector.<Number>;				private var channelCopy : DelayFilter;						//---------------------------------------------------------------------		//		//  Constructor		//		//---------------------------------------------------------------------				public function DelayFilter( feedback : Number = 0.75, length : int = 17640, mix : Number = 0.7, useMilliseconds : Boolean = false ) {			_feedback = feedback;			_useMilliseconds = useMilliseconds;			this.length = length;			_mix = mix;		}						//---------------------------------------------------------------------		//		//  Public methods		//		//---------------------------------------------------------------------				public function process(input : Number) : Number {			readPointer = writePointer - _length + 1;			if ( readPointer < 0 ) readPointer += _length;						delayValue = buffer[ readPointer ];			buffer[ writePointer ] = input * ( 1 - _feedback ) + delayValue * _feedback;						if ( ++writePointer == _length ) writePointer = 0;						return input * ( 1 - _mix ) + delayValue * _mix;
		}
		
		public function duplicate() : IFilter {			var l : Number = _length;			if ( _useMilliseconds ) l /= SoundFX.SAMPLE_RATE * 0.001;			channelCopy = new DelayFilter( _feedback, l, _mix, _useMilliseconds );			return channelCopy;
		}				public function get feedback() : Number {			return _feedback;		}				public function set feedback(feedback : Number) : void {			_feedback = feedback;			if ( channelCopy ) channelCopy.feedback = _feedback;		}				public function set length(length : int) : void {			if ( channelCopy ) channelCopy.length = length;			if ( _useMilliseconds ) {				length = int( length * SoundFX.SAMPLE_RATE * 0.001 );			}			var newBuffer : Vector.<Number> = new Vector.<Number>( length, true );			if ( buffer ) newBuffer.concat( buffer );			buffer = newBuffer;			writePointer = 0;			_length = length;		}		public function get length() : int {			return _length;		}				public function get mix() : Number {			return _mix;		}				public function set mix(mix : Number) : void {			_mix = mix;			if ( channelCopy ) channelCopy.mix = _mix;		}
				public function get useMilliseconds() : Boolean {			return _useMilliseconds;		}				public function set useMilliseconds(useMilliseconds : Boolean) : void {			useMilliseconds = useMilliseconds;			if ( channelCopy ) channelCopy.useMilliseconds = useMilliseconds;		}	}}