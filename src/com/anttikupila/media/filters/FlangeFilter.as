/*The MIT LicenseCopyright (c) <year> <copyright holders>Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package com.anttikupila.media.filters {	import com.anttikupila.media.filters.IFilter;
	
	/**	 * @author Antti Kupila	 */	public class FlangeFilter implements IFilter {
				//---------------------------------------------------------------------		//		//  Variables		//		//---------------------------------------------------------------------				private var _feedback : Number;		private var _delay : Number;		private var _length : Number;				private var offset : Number;				private var i : int = 0;				private var buffer : Vector.<Number>;				private var channelCopy : FlangeFilter;						//---------------------------------------------------------------------		//		//  Constructor		//		//---------------------------------------------------------------------				public function FlangeFilter( length : int = 17600, delay : Number = 880, feedback : Number = 0.7 ) {			_feedback = feedback;			_delay = delay;			this.length = length;		}						//---------------------------------------------------------------------		//		//  Public methods		//		//---------------------------------------------------------------------				public function process(input : Number) : Number {			offset = i - delay;			if ( offset < 0 ) offset += _length;						var index0 : int = int( offset ),				index_1 : int = index0 - 1,				index1 : int = index0 + 1,				index2 : int = index0 + 2;							if ( index_1 < 0 ) index_1 = _length - 1;			if ( index1 >= _length ) index1 = 0; 			if ( index2 >= _length ) index2 = 0; 						var y_1 : Number = buffer[ index_1 ],				y0 : Number = buffer[ index0 ],				y1 : Number = buffer[ index1 ],				y2 : Number = buffer[ index2 ];							var x : Number = offset - index0;							var c0 : Number = y0,				c1 : Number = 0.5 * ( y1 - y_1 ),				c2 : Number = y_1 - 2.5 * y0 + 2 * y1 - 0.5 * y2,				c3 : Number = 0.5 * ( y2 - y_1 ) + 1.5 * ( y0 - y1 );							var output : Number = ( ( c3 * x + c2 ) * x + c1 ) * x + c0;						buffer[ i ] = input + output * feedback;						if ( ++i == _length ) i = 0;						return output;
		}
		
				public function duplicate() : IFilter {			channelCopy = new FlangeFilter( _length, _delay, _feedback );			return channelCopy;
		}				public function get feedback() : Number {			return _feedback;		}				public function set feedback(feedback : Number) : void {			_feedback = feedback;			if ( channelCopy ) channelCopy.feedback = feedback;		}				public function get delay() : Number {			return _delay;		}				public function set delay(delay : Number) : void {			_delay = delay;			if ( channelCopy ) channelCopy.delay = delay;		}				public function get length() : Number {			return _length;		}				public function set length(length : Number) : void {			_length = length;			if ( channelCopy ) channelCopy.length = length;			buffer = new Vector.<Number>( _length, true );		}
	}}